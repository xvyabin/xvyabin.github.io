{"meta":{"title":"开博大吉","subtitle":null,"description":null,"author":"xvyabin","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"JS 里的数据类型转换","slug":"JS 里的数据类型转换","date":"2018-12-05T06:47:47.942Z","updated":"2018-12-05T06:50:47.428Z","comments":true,"path":"2018/12/05/JS 里的数据类型转换/","link":"","permalink":"http://yoursite.com/2018/12/05/JS 里的数据类型转换/","excerpt":"","text":"任意类型转字符串1.用String(转换内容)： String(1)“1”String(true)“true”String(null)“null”String(undefined)“unedfined”String({})“[object object]” 2.内容.tuString()…(此方法null跟unedfined控制台会报错) (1).tuString()“1”true.toString()“true”({}).toString()“[object object]” 3.内容+ “”也能转换字符串： 1+””“1”true +””“true”null +””“null”undefined + “”“undefined”var x= {}x + “”“[object object]” ####任意类型转数字1.Number(数字)(以下“f”没有值的情况是：（NaN）) Number(“f”)NaNNumber(“2”) 2.parseint(内容，进制单位) parseInt(“56”,8)46parseInt(“56”,10)56parseInt(“56”,16)86 3.parseFloat(“小数”) parseFloat(“123.321”)123.321 4.内容 -0 “1” - 01“tuer” -0NaN 5.+内容 + “1”1 ####任意类型转布尔1.Boolean(“内容”） Boolean(Accelerometer)true 2.!!内容 !!abctrue 3.以下5个false 值（除了这5个值其余的转换为true） Boolean (0)falseBoolean(NaN)falseBoolean(null)falseBoolean(“”)falseBoolean(undefined)false ####内存图解1.JS 引擎将内存分为代码区和数据区 2.数据区分为 Stack（栈内存） 和 Heap（堆内存） 简单类型(6种类型)的数据直接存在 Stack 里 复杂类型（object）的数据是把 Heap 地址存在 Stack 里 ####深复制与浅复制 1深复制： var a = 1var b = ab = 2 //这个时候改变 ba 完全不受 b 的影响那么我们就说这是一个深复制 2.浅复制： var a = {name: ‘xyb’}var b = ab.name = ‘b’ // b 操作后，a 也变了a.name === ‘b’ // truea受b影响也变了,那么这就是一个浅复制。","categories":[],"tags":[]},{"title":"CSS  几种布局","slug":"CSS  几种布局","date":"2018-11-14T12:02:02.405Z","updated":"2018-11-14T12:03:10.001Z","comments":true,"path":"2018/11/14/CSS  几种布局/","link":"","permalink":"http://yoursite.com/2018/11/14/CSS  几种布局/","excerpt":"","text":"CSS 几种布局CSS：层叠样式表(Cascading Style Sheets)。CSS由于属性和值的多样复杂，一般都是使用过程中边用边查询。引入CSS的方式有： style内联属性 在HTMLhead使用&lt; style&gt;标签通过&lt; link&gt;引入通过@import url(./style.css)引入 .文档流 一个元素的高度由其内容决定，块极元素由其文档流(normal flow) 的高度总和决定。其中文档流的含义：文档内元素流动的方向，内联元素从左到右，块级元素从上到下，每一快独占一行。浮动(float) 、绝对定位(absolute) 、固定定位(fixed) 三种方式定位会脱离文档流。其中： 1.position: fixed固定定位是相对于窗口定位，用topleft定位；2.绝对定位是相对父元素定位子元素： position: absolute父元素： position: relative3.浮动，子元素使用float: left/right父元素添加.clearfix::after{ content: “”; display: block; clear:both}，用来解决可能出现的bug。 box-sizing: border-boxborder-box与content-box对比，border-box更接近物理世界中的 Box。比如仓库中摆放纸箱. margin 就是箱与箱间的距离，border 就是纸箱纸壳厚度。 padding 就是纸箱中用来减震的泡沫塑料厚度。有人评论，box-sizing属性明显是给box model花式擦屁股，因为box model默认的是content-box，请在CSS开头声明：, ::before, *::after { box-sizing: border-box; } 水平居中 CSS中，进行水平居中是相对比较容易的。如果它是一个行内元素，就对它父元素应用： text-align: center;如果它是一个块级元素，就对她自身应用margin: auto。 垂直居中 Flex布局居中主流方式，广泛用于PC端和移动端: .父元素 { display: flex; aligin-items: center; justify-content: center } grid布局居中 非主流，未来可能取代flex的用法，兼容性待提高 `html.父元素{ display: grid; align-items: center; justify-content: center;}绝对定位居中适用于使用绝对定位的场景，传统方法 .父元素{ position: relative;}.子元素{ position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);}内联元素居中对块级父级使用，能让内部的匿名行盒(文字)、行内元素(span)、inline-block元素在父亲里水平居中 .container { text-align: center; css使用个人小tips：1、写样式时，由内到外，由小到大；2、先写垂直间距，后写左右间距；3、伪类:（一个冒号，虚，状态），伪元素::（两冒号，确实存在，伪装，可以display，不可被选中或复制；4、使用display：inline-block与vertical-align: top同时存在使用。","categories":[],"tags":[]},{"title":"了解CSS","slug":"了解CSS","date":"2018-11-13T02:09:50.818Z","updated":"2018-11-13T02:11:35.044Z","comments":true,"path":"2018/11/13/了解CSS/","link":"","permalink":"http://yoursite.com/2018/11/13/了解CSS/","excerpt":"","text":"#了解CSS 1.CSS 指层叠样式表 (Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。 语法： CSS声明总是以分号(;)结束，声明组以大括号({})括起来:实例：@[p| {|color: red;|text-align: center;|}]p{color: red;text-align: center;} CSS 注释注释是用来解释你的代码，并且可以随意编辑它，浏览器会忽略它。CSS注释以 “/“ 开始, 以 “/“ 结束, 实例如下: / 这是个注释/p{text-align:center;/ 这是另一个注释/color:black;font-family:arial;} 如何插入样式表 1.外部样式表(External style sheet) 当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 &lt; link&gt; 标签链接到样式表。 &lt; link&gt; 标签在（文档的）头部： &lt; head&gt;&lt; link rel=”stylesheet” type=”text/css” href=”mystyle.css”&gt;&lt; /head&gt; 2.内部样式表 当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 &lt; style&gt; 标签在文档头部定义内部样式表，就像这样: &lt; head&gt;&lt; style&gt;hr {color:sienna;}p {margin-left:20px;}body {background-image:url(“images/back40.gif”);}&lt; /style&gt;&lt; /head&gt; 3.内联样式 由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时,要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距： &lt; p style=”color:sienna;margin-left:20px”&gt;这是一个段落。&lt; /p&gt; 学习资源1.Google: 关键词 MDN2.CSS Tricks3.Google: 阮一峰 css4.张鑫旭的 240 多篇 CSS 博客5.Codrops 炫酷 CSS 效果6.CSS揭秘7.CSS 2.1 中文 spec8.Magic of CSS 免费在线书","categories":[],"tags":[]},{"title":"HTML简介（几个常用标签）","slug":"HTML几个常用标签","date":"2018-11-04T02:52:19.127Z","updated":"2018-11-04T02:57:46.767Z","comments":true,"path":"2018/11/04/HTML几个常用标签/","link":"","permalink":"http://yoursite.com/2018/11/04/HTML几个常用标签/","excerpt":"","text":"HTML简介（几个常用标签） HTML 是用来描述网页的一种语言。 HTML 指的是超文本标记语言: Hyper Text Markup Language HTML 不是一种编程语言，而是一种标记语言 标记语言是一套标记标签 (markup tag) HTML 使用标记标签来描述网页 HTML 文档包含了HTML 标签及文本内容 HTML文档也叫做 web 页面 HTML标签总结(常用) 文档章节标签body 呈现给用户header 头部nav 导航aside 和主要内容不相关的区域article 相邻独立可重复主体section 文档中的区域footer 尾部hx h1-h6 标题 文本标签&lt;a&gt; &it;/a&gt;超链接创建指向另一个文档的链接创建一个文档内部的锚点链接到Email地址em strong strong比em更强调span 无语义br 换行 单闭合标签cite q 引用cite引用的出处q简短的一段文字b i 格式化粗体但不想强调 b标签斜体 技术术语等i标签 组标签div 分区(其他标签的容器)p 段落ul ol dl列表无序列表 ul li有序列表 ol li自定义列表dl dt ddpre 经过格式化的内容(保留空格和换行)blockquote 大段引用 资源标签img 嵌入图片(自闭合图片)","categories":[],"tags":[]},{"title":"HTTP入门","slug":"HTTP入门","date":"2018-10-30T07:18:48.274Z","updated":"2018-10-30T07:20:56.147Z","comments":true,"path":"2018/10/30/HTTP入门/","link":"","permalink":"http://yoursite.com/2018/10/30/HTTP入门/","excerpt":"","text":"HTTP入门 超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。1960年美国人Ted Nelson构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了HTTP超文本传输协议标准架构的发展根基。Ted Nelson组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（Internet Engineering Task Force ）共同合作研究，最终发布了一系列的RFC，其中著名的RFC 2616定义了HTTP 1.1,目前常用HTTP协议版本为HTTP/1.1和HTTP/1.2。 HTTP 的作用就是指导浏览器和服务器如何进行沟通当用户在浏览器输入网址点击回车后，大致发生了以下流程： HTTP 请求 HTTP请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）示例如下： 1 动词 路径 协议/版本2 Key1: value12 Key2: value22 Key3: value32 Content-Type: application/x-www-form-urlencoded2 Host: www.baidu.com2 User-Agent: curl/7.54.034 要上传的数据 在Chrome开发者工具中，Network下可以查看请求报文首部和响应报文首部: HTTP响应 请求对应的响应分为4个部分组成示例如下： 1 协议/版本号 状态码 状态解释2 Key1: value12 Key2: value22 Content-Length: 179312 Content-Type: text/html34 要下载的内容 HTTP请求方法 方法 说明 方法 说明 GET 获取资源 POST 传输实体 PUT 传输文件 HEAD 获得报文首部 DELETE 删除文件 OPTIONS 询问支持的方法 TRACE 追踪路径 CONNECT 要求用隧道协议连接代理 LINK 建立和资源之间的联系 UNLINK 断开连接关系 curl命令 在浏览器上我们可以直接输入网址，但在命令行中，同样可以通过curl命令来完成动作。在官方文档对curl的解释是：curl是一种使用其中一种支持的协议从服务器传输数据或向服务器传输数据的工具，curl提供了大量有用的技巧，如代理支持，用户身份验证，FTP上传，HTTP发布，SSL连接，cookie，文件传输恢复等，如下是部分语法： curl语法curl [options] [URL…] curl -s -v -H “key: value” – “www.baidu.com&quot;-s:表示安静模式，不显示进度条；-v：表示显示请求报文和响应报文；-H “key：alue”：往首部字段添加key/alue curl -X POST -d “xxxx” -s -v -H “key: value” – “www.baidu.com&quot;-X POST:表示改变请求方法为POST（或者其他）； -d “xxxx”：表示上传xxxx","categories":[],"tags":[]},{"title":"命令行基础使用","slug":"命令行基础使用","date":"2018-10-27T03:19:49.711Z","updated":"2018-10-27T03:32:22.498Z","comments":true,"path":"2018/10/27/命令行基础使用/","link":"","permalink":"http://yoursite.com/2018/10/27/命令行基础使用/","excerpt":"","text":"命令行基础使用 命令行是每一个开发者都会频繁使用的，与Windows图形界面所不同的是，命令行操作都是靠命令来执行的。下面列举了一些常用的一些命令，例如增删改查。 基础命令介绍 命令 全写 缩写 创建目录 make directory mkdir 删除 remove rm 移动/重命名 move mv 复制 copy cp 罗列 list ls 改变目录 change directory 有些命令后面可以增加参数，达到不同目的。例如ls，表示列出目录下内容，常用参数有ls -a,ls -l,ls -la。ls -a表示列出目录下所有内容，包括以.开头的文件。ls -l表示以长列表列出目录下内容，包括内容权限，用户，修改时间等。 在图片中，使用touch命令，touch为触摸意思，当touch的文件不存在时，会创建该文件。当文件存在时，touch会更新文件的修改时间。 mv这个命令有移动/重命名意思，当不同路径时为移动，相同路径为重命名。 mv 1.txt ./1/2/操作为把1.txt从当前目录移动到./1/2/目录下 mv 1.txt 2.txt操作为把1.txt重命名为2.txt cat这个命令操作为连接文件并在标准输出上打印。 命令何其多，如果忘了某个命令可以Google。当看到某一个命令不知道为何意时，我们可以用man +命令来获得这个命令的相关参考手册，或者tldr +命令，tldr翻译是太长不读，可以通过npm i -g tldr安装这个工具。 当然也可以通过explainshell这个网站来查找命令解释。ss","categories":[],"tags":[]},{"title":"git使用教程","slug":"git使用教程","date":"2018-10-24T06:44:13.366Z","updated":"2018-10-26T14:23:49.910Z","comments":true,"path":"2018/10/24/git使用教程/","link":"","permalink":"http://yoursite.com/2018/10/24/git使用教程/","excerpt":"","text":"git使用教程 Git是一个分布式版本控制系统，最初是由林纳斯·托瓦兹创作。Github是一个基于Git的项目托管平台 Git的安装Windows上需要安装Git Bash，可直接从官网下载或者各镜像网站下载安装Linux只须运行 sudo apt-get install git 命令即可Mac上需要通过 homebrew 或者 Xcode 安装 Git的初使用在使用Git之前，我们需要先进行一些简单设置，目的是首先表明身份。 git config –global user.name 你的英文名git config –global user.email 你的邮箱git config –global push.default matchinggit config –global core.quotepath falsegit config –global core.editor “vim” Git初始的几个命令 通过git init命令把这个目录变成Git可以管理的仓库: $ git initInitialized empty Git repository in /Users/michael/learngit/.git/ 这个命令是用初始化一个空的Git仓库。同时在当前目录下多了一个.git目录，是用于跟踪管理版本库。在初次使用时，请忽略这个目录，不要修改它，避免把Git仓库破坏。 用命令git add告诉Git，把文件添加到仓库： $ git add readme.txt 这个命令是告诉Git把变动添加到“暂存区”。但是请注意命令后面要有文件或者目录。当正确执行这个明令后，不会有任何显示。 用命令git commit告诉Git，把文件提交到仓库： $ git commit -m “wrote a readme file”[master (root-commit) eaadf4e] wrote a readme file1 file changed, 2 insertions(+)create mode 100644 readme.txt 这个命令是提交暂存区到仓库区。同时git commit可以接不同参数。 -v表示提交时显示所有diff信息，即两个文本文件的差异-m [message]用来正式提交变动，提交至 .git 仓库-a 表示提交工作区自上次commit之后的变化，直接到仓库区，不建议采用这种提交，因为会导致以后的回溯出现混乱","categories":[],"tags":[]},{"title":"javascript的数据类型","slug":"javascript的数据类型","date":"2018-10-24T02:00:53.000Z","updated":"2018-12-04T12:32:56.956Z","comments":true,"path":"2018/10/24/javascript的数据类型/","link":"","permalink":"http://yoursite.com/2018/10/24/javascript的数据类型/","excerpt":"","text":"javascript的数据类型javascript的历史JavaScript 因为互联网而生，紧跟着浏览器的出现而问世。回顾它的历史，就要从浏览器的历史讲起。 基本语法：借鉴 C 语言和 Java 语言。数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。正则表达式：借鉴 Perl 语言。字符串和数组处理：借鉴 Python 语言。 ####数据类型 js有7种数据类型：数字（number）；字符串（string）；布尔（boolean）；字符（symbol）；null；undefined；对象（object）； ####1.number十进制：1表示整数，0.123或 .123表示小数，还可以1.23e2的2此方表示。 八进制：字面值第一位必须是零（0），然后八进制数字序列（0-7）. 如果字面值数值超出范围，前导零忽略，和面当做十进制解析 二进制：以0b开头，0b大小写无所谓。 十六进制：十六进制（简写为hex或下标16）在数学中是一种逢16进1的进位制。一般用数字0到9和字母A到F（或a~f）表示，其中:A~F表示10~15，这些称作十六进制数字。 ####2.字符串（string）String即字符串类型，只要是被单引号（‘’）或者双引号（“”）引起来的类型就是String类型示例： var leng= “你好” var leng= ‘你好’ 转义字符 意义 ASCII码值（十进制） \\’ 代表一个单引号（撇号）字符 039 \\” 代表一个双引号字符 034 多行字符串字符串相加这是最容易理解也很常用的一种形式或者以下方\\或`换行写法（\\ `要注意空格）： var a =”123456 56789” //报错 var a =”123456 \\ 56789” //正确 var a = “123456” + “56789” //或者 var a =`12345656789`//反引号写法 ####3.boolean(布尔) Boolean类型只有两个字面值：true和false，虽然Boolean类型字面值只有两个，但ECMAScript中所有类型都有与这两个Boolean值等价的值。 &amp;&amp; 与|| 两个运算符列：a &amp;&amp; b //两个满足真的的情况才为真a || b //一方满足真的情况为真 ####4.字符（symbol）Symbol函数前不能使用new命令，否则会报错。这是因为生成的Symbol是一个原始类型的值，不是对象 Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。 ####5.null与undefinednull类型只有一个值：Nullundefined类型只有一个值： undefined这两个值的意思：什么都没有。在javascript中，一个变量没有值就是-undefined ####6.对象(object)对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。 什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。 var obj ={ a : “hello”, b : “world”} ; 对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。 如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。 var object ={ 2c : 1};//报错var object ={ “2c”: 1};//不报错 对象里面也可以有对象 var person = { a:{ age:18 }}person[ ‘a’ ] 等价于 person.a delete 可以删除key var person = { a:{ age:18 }}delete person[ ‘a’ ] //删除a in 判断对象是否为数组/对象的元素/属性格式：（变量 in 对象）……注意，，，当“对象”为数组时，“变量”指的是数组的“索引”；当“对象”为对象是，“变量”指的是对象的“属性”。 var person = { a:{ age:18 }}a in person //ture for...in循环用来遍历一个对象的全部属性。 var obj = {a: 1, b: 2, c: 3}; for (var i inobj) { console.log(‘键名：’, i); console.log(‘键值：’, obj[i]);}// 键名： a// 键值： 1// 键名： b// 键值： 2// 键名： c// 键值： 3 with语句 with (对象) { 语句;}","categories":[],"tags":[]},{"title":"开博大吉","slug":"开博大吉","date":"2018-10-24T02:00:53.000Z","updated":"2018-10-24T02:00:53.109Z","comments":true,"path":"2018/10/24/开博大吉/","link":"","permalink":"http://yoursite.com/2018/10/24/开博大吉/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-10-24T01:53:50.403Z","updated":"2017-10-28T00:39:58.000Z","comments":true,"path":"2018/10/24/hello-world/","link":"","permalink":"http://yoursite.com/2018/10/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}